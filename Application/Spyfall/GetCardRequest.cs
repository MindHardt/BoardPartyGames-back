using Application.Spyfall.Models;
using Data;
using Microsoft.EntityFrameworkCore;

namespace Application.Spyfall;

/// <summary>
/// A request to get a card in a spyfall game.
/// </summary>
public record GetCardRequest
{
    /// <summary>
    /// A game key generated by POST /game
    /// </summary>
    public required Guid GameId { get; init; }
    /// <summary>
    /// A 1-based player number.
    /// </summary>
    /// <example>1</example>
    public byte Number { get; init; } = 1;
}

public class GetCardHandler(
    DataContext dataContext)
    : IRequestHandler<GetCardRequest, SpyfallPlayerCardModel>
{
    public async Task<SpyfallPlayerCardModel> HandleAsync(GetCardRequest request, CancellationToken ct = default)
    {
        var game = await dataContext.SpyfallGames
            .Include(x => x.Location)
            .FirstOrDefaultAsync(x => x.Id == request.GameId, ct);

        ArgumentNullException.ThrowIfNull(game);

        var roles = game.Location.Roles
            .Cast<string?>()
            .ToList();
        foreach (var spyIndex in game.SpiesIndices)
        {
            roles.Insert(spyIndex, null);
        }

        var role = roles[request.Number - 1];

        return role is null
            ? SpyfallPlayerCardModel.Spy
            : new SpyfallPlayerCardModel(game.Location.Name, role);
    }
}