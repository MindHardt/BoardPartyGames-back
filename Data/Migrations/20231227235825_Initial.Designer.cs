// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231227235825_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CodenamesGameCodenamesPlayer", b =>
                {
                    b.Property<Guid>("CodenamesGameId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlayersId")
                        .HasColumnType("uuid");

                    b.HasKey("CodenamesGameId", "PlayersId");

                    b.HasIndex("PlayersId");

                    b.ToTable("CodenamesGamePlayers", (string)null);
                });

            modelBuilder.Entity("Data.Entities.CodenamesGame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string[]>("Colors")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<bool[]>("GuessedWords")
                        .IsRequired()
                        .HasColumnType("boolean[]");

                    b.Property<int>("PlayersCount")
                        .HasColumnType("integer");

                    b.Property<string[]>("Words")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("CodenamesGames");
                });

            modelBuilder.Entity("Data.Entities.CodenamesPlayer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CodenamesPlayers");
                });

            modelBuilder.Entity("Data.Entities.CodenamesWord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Deck")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CodenamesWords");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e36c20c7-58b6-4bb6-bd99-36f4c7bbb34f"),
                            Deck = "Стандартная",
                            ImageUrl = "",
                            Name = "Кафе"
                        },
                        new
                        {
                            Id = new Guid("487fbd48-ff40-42e6-b00f-a5f7410b50c3"),
                            Deck = "Стандартная",
                            ImageUrl = "",
                            Name = "Тюрьма"
                        },
                        new
                        {
                            Id = new Guid("547fcd48-ff40-42e6-d10d-a5f7410b30f1"),
                            Deck = "premium gold VIP deck",
                            ImageUrl = "",
                            Name = "Поезд"
                        },
                        new
                        {
                            Id = new Guid("658d22f1-f3c5-42a6-9c7a-9080267bc3fc"),
                            Deck = "Стандартная",
                            ImageUrl = "",
                            Name = "Заправка"
                        },
                        new
                        {
                            Id = new Guid("736c20c7-58b6-4bb6-bd99-36f4c7bbb322"),
                            Deck = "Стандартная",
                            ImageUrl = "",
                            Name = "Кафе"
                        },
                        new
                        {
                            Id = new Guid("887fbd48-ff40-42e6-b00f-a5f7410b50c3"),
                            Deck = "Стандартная",
                            ImageUrl = "",
                            Name = "Тюрьма"
                        },
                        new
                        {
                            Id = new Guid("958d22f1-f3c5-42a6-9c7a-9080267bc3f3"),
                            Deck = "Стандартная",
                            ImageUrl = "",
                            Name = "Заправка"
                        },
                        new
                        {
                            Id = new Guid("106c20c7-58b6-4bb6-bd99-36f4c7bbb347"),
                            Deck = "Стандартная",
                            ImageUrl = "",
                            Name = "Кафе"
                        },
                        new
                        {
                            Id = new Guid("117fbd48-ff40-42e6-b00f-a5f7410b50c4"),
                            Deck = "Стандартная",
                            ImageUrl = "",
                            Name = "Тюрьма"
                        },
                        new
                        {
                            Id = new Guid("128d22f1-f3c5-42a6-9c7a-9080267bc3f3"),
                            Deck = "Стандартная",
                            ImageUrl = "",
                            Name = "Заправка"
                        },
                        new
                        {
                            Id = new Guid("136c20c7-58b6-4bb6-bd99-36f4c7bbb34f"),
                            Deck = "Стандартная",
                            ImageUrl = "",
                            Name = "Кафе"
                        },
                        new
                        {
                            Id = new Guid("147fbd48-ff40-42e6-b00f-a5f7410b50c9"),
                            Deck = "Стандартная",
                            ImageUrl = "",
                            Name = "Тюрьма"
                        },
                        new
                        {
                            Id = new Guid("158d22f1-f3c5-42a6-9c7a-9080267bc3ab"),
                            Deck = "Стандартная",
                            ImageUrl = "",
                            Name = "Заправка"
                        },
                        new
                        {
                            Id = new Guid("166c20c7-58b6-4bb6-bd99-36f4c7bbb34b"),
                            Deck = "Стандартная",
                            ImageUrl = "",
                            Name = "Кафе"
                        },
                        new
                        {
                            Id = new Guid("177fbd48-ff40-42e6-b00f-a5f7410b50c2"),
                            Deck = "Стандартная",
                            ImageUrl = "",
                            Name = "Тюрьма"
                        },
                        new
                        {
                            Id = new Guid("188d22f1-f3c5-42a6-9c7a-9080267bc3f3"),
                            Deck = "Стандартная",
                            ImageUrl = "",
                            Name = "Заправка"
                        },
                        new
                        {
                            Id = new Guid("196c20c7-58b6-4bb6-bd99-36f4c7bbb34b"),
                            Deck = "Стандартная",
                            ImageUrl = "",
                            Name = "Кафе"
                        },
                        new
                        {
                            Id = new Guid("207fbd48-ff40-42e6-b00f-a5f7410b50c2"),
                            Deck = "Стандартная",
                            ImageUrl = "",
                            Name = "Тюрьма"
                        },
                        new
                        {
                            Id = new Guid("218d22f1-f3c5-42a6-9c7a-9080267bc3f3"),
                            Deck = "Стандартная",
                            ImageUrl = "",
                            Name = "Заправка"
                        },
                        new
                        {
                            Id = new Guid("226c20c7-58b6-4bb6-bd99-36f4c7bbb34b"),
                            Deck = "Стандартная",
                            ImageUrl = "",
                            Name = "Кафе"
                        },
                        new
                        {
                            Id = new Guid("237fbd48-ff40-42e6-b00f-a5f7410b50c2"),
                            Deck = "Стандартная",
                            ImageUrl = "",
                            Name = "Тюрьма"
                        },
                        new
                        {
                            Id = new Guid("248d22f1-f3c5-42a6-9c7a-9080267bc3f3"),
                            Deck = "Стандартная",
                            ImageUrl = "",
                            Name = "Заправка"
                        },
                        new
                        {
                            Id = new Guid("256c20c7-58b6-4bb6-bd99-36f4c7bbb34b"),
                            Deck = "Стандартная",
                            ImageUrl = "",
                            Name = "Кафе"
                        },
                        new
                        {
                            Id = new Guid("487fbd48-fc40-46e6-b10f-a5f7410b50c3"),
                            Deck = "Стандартная",
                            ImageUrl = "",
                            Name = "Тюрьма"
                        });
                });

            modelBuilder.Entity("Data.Entities.SpyfallGame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<int>("PlayersCount")
                        .HasColumnType("integer");

                    b.Property<int[]>("SpiesIndices")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("SpyfallGames");
                });

            modelBuilder.Entity("Data.Entities.SpyfallLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Deck")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string[]>("Roles")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SpyfallLocations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("558d22f1-f3c5-42a6-9c7a-9080267bc3f3"),
                            Deck = "Стандартная",
                            ImageUrl = "img/Spyfall/Заправка.jpg",
                            Name = "Заправка",
                            Roles = new[] { "Кассир", "Заправщик", "Дальнобойщик", "Водитель", "Уборщица", "Автомойщик", "Ребенок в кресле", "Кот" }
                        },
                        new
                        {
                            Id = new Guid("e36c20c7-58b6-4bb6-bd99-36f4c7bbb34b"),
                            Deck = "Стандартная",
                            ImageUrl = "img/Spyfall/Кафе.jpg",
                            Name = "Кафе",
                            Roles = new[] { "Повар", "Официант", "Бармен", "Завсегдатай", "Удаленщик", "Уборщик", "Ребенок", "Толстяк" }
                        },
                        new
                        {
                            Id = new Guid("487fbd48-ff40-42e6-b00f-a5f7410b50c2"),
                            Deck = "Стандартная",
                            ImageUrl = "img/Spyfall/Тюрьма.jpg",
                            Name = "Тюрьма",
                            Roles = new[] { "Охранник", "Повар", "Наркоторговец", "Контрабандист", "Убийца", "Врач", "Вор", "Посетитель" }
                        },
                        new
                        {
                            Id = new Guid("547fcd48-ff40-42e6-d10d-a5f7410b30f5"),
                            Deck = "premium gold VIP deck",
                            ImageUrl = "img/Spyfall/Поезд.jpg",
                            Name = "Поезд",
                            Roles = new[] { "Охранник", "Проводник", "Наркоторговец", "Контрабандист", "Убийца", "Повор", "Пассажир" }
                        });
                });

            modelBuilder.Entity("Data.Entities.SpyfallPlayer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SpyfallPlayers");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SpyfallGameSpyfallLocation", b =>
                {
                    b.Property<Guid>("PossibleLocationsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpyfallGameId")
                        .HasColumnType("uuid");

                    b.HasKey("PossibleLocationsId", "SpyfallGameId");

                    b.HasIndex("SpyfallGameId");

                    b.ToTable("SpyfallGameLocations", (string)null);
                });

            modelBuilder.Entity("SpyfallGameSpyfallPlayer", b =>
                {
                    b.Property<Guid>("PlayersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpyfallGameId")
                        .HasColumnType("uuid");

                    b.HasKey("PlayersId", "SpyfallGameId");

                    b.HasIndex("SpyfallGameId");

                    b.ToTable("SpyfallGamePlayers", (string)null);
                });

            modelBuilder.Entity("CodenamesGameCodenamesPlayer", b =>
                {
                    b.HasOne("Data.Entities.CodenamesGame", null)
                        .WithMany()
                        .HasForeignKey("CodenamesGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.CodenamesPlayer", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.SpyfallGame", b =>
                {
                    b.HasOne("Data.Entities.SpyfallLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("SpyfallGameSpyfallLocation", b =>
                {
                    b.HasOne("Data.Entities.SpyfallLocation", null)
                        .WithMany()
                        .HasForeignKey("PossibleLocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.SpyfallGame", null)
                        .WithMany()
                        .HasForeignKey("SpyfallGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpyfallGameSpyfallPlayer", b =>
                {
                    b.HasOne("Data.Entities.SpyfallPlayer", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.SpyfallGame", null)
                        .WithMany()
                        .HasForeignKey("SpyfallGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
