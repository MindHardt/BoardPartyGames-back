// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231120130632_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.SpyfallGame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<int>("PlayersCount")
                        .HasColumnType("integer");

                    b.Property<int[]>("SpiesIndices")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("SpyfallGames");
                });

            modelBuilder.Entity("Data.Entities.SpyfallLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string[]>("Roles")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SpyfallLocations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("558d22f1-f3c5-42a6-9c7a-9080267bc3f3"),
                            ImageUrl = "img/Spyfall/Заправка.jpg",
                            Name = "Заправка",
                            Roles = new[] { "Кассир", "Заправщик", "Дальнобойщик", "Водитель", "Уборщица", "Автомойщик", "Ребенок в кресле", "Кот" }
                        },
                        new
                        {
                            Id = new Guid("e36c20c7-58b6-4bb6-bd99-36f4c7bbb34b"),
                            ImageUrl = "img/Spyfall/Кафе.jpg",
                            Name = "Кафе",
                            Roles = new[] { "Повар", "Официант", "Бармен", "Завсегдатай", "Удаленщик", "Уборщик", "Ребенок", "Толстяк" }
                        },
                        new
                        {
                            Id = new Guid("487fbd48-ff40-42e6-b00f-a5f7410b50c2"),
                            ImageUrl = "img/Spyfall/Тюрьма.jpg",
                            Name = "Тюрьма",
                            Roles = new[] { "Охранник", "Повар", "Наркоторговец", "Контрабандист", "Убийца", "Врач", "Вор", "Посетитель" }
                        });
                });

            modelBuilder.Entity("SpyfallGameSpyfallLocation", b =>
                {
                    b.Property<Guid>("PossibleLocationsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpyfallGameId")
                        .HasColumnType("uuid");

                    b.HasKey("PossibleLocationsId", "SpyfallGameId");

                    b.HasIndex("SpyfallGameId");

                    b.ToTable("SpyfallGameLocations", (string)null);
                });

            modelBuilder.Entity("Data.Entities.SpyfallGame", b =>
                {
                    b.HasOne("Data.Entities.SpyfallLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("SpyfallGameSpyfallLocation", b =>
                {
                    b.HasOne("Data.Entities.SpyfallLocation", null)
                        .WithMany()
                        .HasForeignKey("PossibleLocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.SpyfallGame", null)
                        .WithMany()
                        .HasForeignKey("SpyfallGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
